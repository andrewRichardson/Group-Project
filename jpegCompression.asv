function jpegCompression(image)

    rgb = imread(image);
    
    % STEP 1: COMPRESSION
    % -------------------
    
    
    % Conversion to YCbCr
    ycbcr = rgb2ycbcr(rgb);
    
    width = size(rgb);
    height = width(2);
    width = width(1);
    
    N = 8;
    
    % Chroma Sub-Sampling 4:2:0
    subsampled = double(zeros(width,height,3));
    for i=1:width
        for j=1:height
            x = mod(i-1, 2);
            y = mod(j-1, 2);
            
            subsampled(i,j,1) = ycbcr(i,j,1);
            subsampled(i,j,2) = ycbcr(i-x,j-y,2); 
            subsampled(i,j,3) = ycbcr(i-x,j-y,3);
        end
    end
    
    % 2D DCT Transform
    dct = dct2(subsampled(:,:,1)/255);
    dct(:,:,2) = dct2(subsampled(:,:,2)/255);
    dct(:,:,3) = dct2(subsampled(:,:,3)/255);
    
    
    % !!! ------------------------------------ !!!
    % DCT function that did NOT work:
    % !!! ------------------------------------ !!!
    
%     dct = double(zeros(width,height,3));
%     block_cols = floor(width/N);
%     block_rows = floor(height/N);
%     for channel = 1:3
%         for i = 1:block_cols*block_rows
%             x = mod(i-1, block_rows);
%             y = floor(i/block_rows);
%             
%             dct_block = double(zeros(N,N));
%             for m = 1:N
%                 for n = 1:N
%                     if m == 0
%                         kx = sqrt(1/N);
%                     else
%                         kx = sqrt(2/N);
%                     end
% 
%                     if n == 0
%                         ky = sqrt(1/N);
%                     else
%                         ky = sqrt(2/N);
%                     end
% 
%                     sum = 0;
%                     for k = 1:N
%                         for l = 1:N
%                             dct_coef = subsampled(x + k, y + l, channel) * cos(((2 * (k-1) + 1) * (m-1) * pi) / (2 * N)) * cos(((2 * (l-1) + 1) * (n-1) * pi) / (2 * N));
%                             sum = sum + dct_coef;
%                         end
%                     end
%                     dct_block(m, n) = (kx * ky * sum)/(2*N);
%                 end
%             end
%             for m = 1:N
%                 for n = 1:N
%                     dct(x + m, y + n, channel) = dct_block(m, n);
%                 end
%             end
%         end
%     end
    
    % Quantization
    lum_matrix = [16 11 10 16 24 40 51 61; 12 12 14 19 26 58 60 55; 14 13 16 24 40 57 69 56; 14 17 22 29 51 87 80 62; 18 22 37 56 68 109 103 77; 24 35 55 64 81 104 113 92; 49 64 78 87 103 121 120 101; 72 92 95 98 112 100 103 99];
    chrom_matrix = [17 18 24 47 99 99 99 99; 18 21 26 66 99 99 99 99; 24 26 56 99 99 99 99 99; 47 66 99 99 99 99 99 99; 99 99 99 99 99 99 99 99; 99 99 99 99 99 99 99 99; 99 99 99 99 99 99 99 99; 99 99 99 99 99 99 99 99];
    
    lum_matrix = lum_matrix / 255;
    chrom_matrix = chrom_matrix / 255;
    
    quantized = double(zeros(width,height,3));
    for i = 1:width
        for j = 1:height
            x = mod(i, N);
            y = mod(j, N);
            
            if x == 0
                x = 8;
            end
            if y == 0
                y = 8;
            end
            
            quantized(i, j, 1) = round(dct(i, j, 1) / (lum_matrix(x, y)));
            
            quantized(i, j, 2) = round(dct(i, j, 2) / (chrom_matrix(x, y)));
            
            quantized(i, j, 3) = round(dct(i, j, 3) / (chrom_matrix(x, y)));
        end
    end
    
    % STEP 2: DECOMPRESSION
    % ---------------------
    
    
    % Dequantization
    dequantized = double(zeros(width,height,3));
    for i = 1:width
        for j = 1:height
            x = mod(i, N);
            y = mod(j, N);
            
            if x == 0
                x = 8;
            end
            if y == 0
                y = 8;
            end
            
            dequantized(i, j, 1) = round(quantized(i, j, 1) * (lum_matrix(x, y)));
            
            dequantized(i, j, 2) = round(quantized(i, j, 2) * (chrom_matrix(x, y)));
            
            dequantized(i, j, 3) = round(quantized(i, j, 3) * (chrom_matrix(x, y)));
        end
    end
    
    % 2D IDCT Transform
    idct = idct2(dequantized(:,:,1));
    idct(:,:,2) = idct2(dequantized(:,:,2));
    idct(:,:,3) = idct2(dequantized(:,:,3));

    
    % !!! ------------------------------------ !!!
    % IDCT function that did NOT work:
    % !!! ------------------------------------ !!!

    
%     idct = double(zeros(width,height,3));
%     for channel = 1:3
%         for i = 1:block_cols*block_rows
%             x = mod(i-1, block_rows);
%             y = floor(i/block_rows);
%             
%             idct_block = double(zeros(N,N));
%             for k = 1:N
%                 for l = 1:N
%                     sum = 0;
%                     for m = 1:N
%                         for n = 1:N
%                             if m == 0
%                                 kx = sqrt(1/N);
%                             else
%                                 kx = sqrt(2/N);
%                             end
% 
%                             if n == 0
%                                 ky = sqrt(1/N);
%                             else
%                                 ky = sqrt(2/N);
%                             end
%                             idct_coef = ((kx * ky)/(2*N)) * dequantized(x + k, y + l, channel) * cos(((2 * (k-1) + 1) * (m-1) * pi) / (2 * N)) * cos(((2 * (l-1) + 1) * (n-1) * pi) / (2 * N));
%                             sum = sum + idct_coef;
%                         end
%                     end
%                     idct_block(x + m, y + n) = sum;
%                 end
%             end
%             for m = 1:N
%                 for n = 1:N
%                     idct(x+m, y+n, channel) = idct_block(m, n);
%                 end
%             end
%         end
%     end
    
    % YCbCr to RGB
    final_rgb = double(zeros(width,height,3));
    final_rgb = ycbcr2rgb(idct);
    
    % STEP 3: DISPLAY
    % ---------------
    
    
    % Display and save
    step1_subsample = strcat('step1_subsample_', image);
    step1_dct = strcat('step1_dct_', image);
    step1_quantization = strcat('step1_quantization_', image);
    ss_rgb = ycbcr2rgb(subsampled);
    dct_rgb = ycbcr2rgb(dct);
    quantized_rgb = ycbcr2rgb(quantized);
    
    step2_dequantization = strcat('step2_dequantization_', image);
    step2_idct = strcat('step2_idct-and-conversion_', image);
    dequantized_rgb = ycbcr2rgb(dequantized);
    
    imwrite(ss_rgb, step1_subsample);
    imwrite(dct_rgb, step1_dct);
    imwrite(quantized_rgb, step1_quantization);
    
    imwrite(dequantized_rgb, step2_dequantization);
    imwrite(final_rgb, step2_idct);
    
    d_rgb = double(rgb)/255;
    error = final_rgb(:,:,1) - d_rgb(:,:,1);
    error(:,:,2) = final_rgb(:,:,2) - d_rgb(:,:,2);
    error(:,:,3) = final_rgb(:,:,3) - d_rgb(:,:,3);
    imagesc(error);
    
    sum = 0;
    for x = 1:width
        for y = 1:height
            sum = sum + (d_rgb(x,y,1) - final_rgb(x,y,1))^2;
        end
    end
    mse = sum / (width * height * 3);
    fprintf('\nMSE Value: %.4f\n', mse);
    
    psnr = 20 * log(255/sqrt(mse));
    fprintf('\nPSNR Value: %.4f\n\n', psnr);
    
    disp('STEP 1. Compression\n\n');
    
    
    disp('Input (RGB):');
    disp(rgb(1:8:1));
    disp(rgb(1:8:2));
    disp(rgb(1:8:2));
    disp('\n\n');
    
    disp('Output (Quantized):');
    disp(uint8(quantized(1:8:1)*255));
    disp(uint8(quantized(1:8:2)*255));
    disp(uint8(quantized(1:8:2)*255));
    disp('\n\n');
end